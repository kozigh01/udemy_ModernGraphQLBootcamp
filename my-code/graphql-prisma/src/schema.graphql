# import UserOrderByInput, PostOrderByInput, CommentOrderByInput from './generated/prisma.graphql'


type Query {
    users(query: String, orderBy: UserOrderByInput, first: Int, skip: Int, after: ID): [User!]!
    posts(query: String, orderBy: PostOrderByInput, first: Int, skip: Int, after: ID): [Post!]!
    comments(query: String, orderBy: CommentOrderByInput, first: Int, skip: Int, after: ID): [Comment!]!
    post(id: ID!): Post!
}

type Mutation {
    login(data: LoginUserInput!): AuthPayload!

    createUser(data: CreateUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput!): User!

    createPost(data: CreatePostInput!): Post!
    deletePost(id: ID!): Post!
    updatePost(id: ID!, data: UpdatePostInput): Post!
    
    createComment(data: CreateCommentInput!): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput!): Comment!
}

type Subscription {
    comment(postId: ID!): CommentSubscriptionPayload!,
    post: PostSubscriptionPayload!,
}

input LoginUserInput {
    email: String!
    password: String!
}

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
}

input CreatePostInput {
    title: String!
    body: String!
    published: Boolean!
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}

input CreateCommentInput {
    text: String!
    post: ID!
}

input UpdateCommentInput {
    text: String
}

type User {
    id: ID
    name: String!
    email: String
    password: String!
    posts: [Post!]!
    comments: [Comment!]!
    updatedAt: String!
    createdAt: String!
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    updatedAt: String!
    createdAt: String!
    author: User!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    text: String!
    updatedAt: String!
    createdAt: String!
    author: User!
    post: Post!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post!
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    node: Comment
}
